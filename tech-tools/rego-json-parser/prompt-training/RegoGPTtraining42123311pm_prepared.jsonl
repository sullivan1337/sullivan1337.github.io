{"prompt":"Use OPA's rego policy language, and always follow all rules below:\n\nRego Rule building blocks:\n1. Each rule must start with \\`package wiz\\`\n2. \\`result\\` = mandatory variable that controls the status of the rule\n3. \\`currentConfiguration := \"abc\"\\` and \\`expectedConfiguration := \"xyz\"\\` Output additional context, guidance and information from the Rule which are shown when a Configuration Finding is generated by the Rule. This can use the Rule's variables or plain text.\n4. Rather than \\`compliant\\` and \\`noncompliant\\` status, make the result return \\`pass\\`, \\`fail\\`, or \\'skip\\' (Resources should be skipped when it wouldn't make sense for the Cloud Configuration Rule to assess them at all. For instance, the built-in Cloud Configuration Rule for default security group should have no rules configured evaluates EC2 Security Groups but skips all non-default groups.)\n5. Basic functions relating to time:\n\n\ntime.now_ns() # current time since epoch in nanoseconds\ntime.parse_duration_ns(duration) # duration valid time units:\"s\",\"m\",\"h\"(\"-1h\",\"2h4m\")\ntime.parse_rfc3339_ns(value) # representing the time value in nanoseconds since epoch\nFor instance, if you wanted to check that secret keys are rotated at least every 90 days:\n\ndefault result = \"pass\"\n\nnow_ns := time.now_ns()\nninty_days_ns := time.parse_duration_ns(\"2160h\") # 90d in hours\n\nresult = \"fail\" {\n    (now_ns - time.parse_rfc3339_ns(input.timeCreated)) > ninty_days_ns\n}\n6. The following is an example of a good working rego rule: \n\\`\\`\\`\npackage wiz\n\ndefault result = \"pass\"\n\nvalidFlowLogConfig {\n    input.enableFlowLogs\n    input.logConfig.aggregationInterval == \"INTERVAL_5_SEC\"\n    input.logConfig.flowSampling == 1\n    input.logConfig.metadata == \"INCLUDE_ALL_METADATA\"\n    count(input.logConfig.filterExpr) < 1\n}\n\nresult = \"fail\" {\n    input.purpose == \"PRIVATE\"\n    not validFlowLogConfig\n}\n\ncurrentConfiguration := \"The private subnet's flow logs configuration is missing or invalid\"\nexpectedConfiguration := \"Flow logs should be configured\"\n\\`\\`\\`\n7. Reserved names\nThe following words are reserved and cannot be used for document names:\nas\ndefault\nelse\nfalse\nimport\npackage\nnot\nnull\nsome\ntrue\nwith\n\n8. Operators & logical expressions\nRego offers many built-in logical expressions:\n\n\n# These are logical expressions\nx == y  # x is equal to y ({1,3,1,4} == {4,4,1,3,1} #true)\nx != y  # x is not equal to y\nx < y   # x is less than y\nx <= y  # x is less than or equal to y\n\n# Built-in set functions\ns3 := s1 & s2   # s3 is the intersection of s1 and s2\ns3 := s1 | s2   # s3 is the union of s1 and s2\ns3 := s1 - s2   # s3 is the elements in s1 that are not in s2\nOne especially useful operator is not, which has several important behaviors:\n\nnot turns undefined into true\nnot turns false into true\nnot turns everything else into true\n\n# Check if path does not exist\nnot input.foo.bar\n\n# This is a negation of the return value of the called function\nnot myfunction\n\n10. \nLogical evaluations\nEvery line of code in a policy performs a logical evaluation that returns either true or false. If the conditions in a rule never evaluate to true, the result is undefined. As a result, the document that would otherwise be defined by the rule's assignment remains undefined.\n\n\n# Check if the value of foo equals the value bar, and returns a logical true\n# Since the condition is true (foo and bar both equal 1), the assignment is performed\n# The assignment overrides the default value of allow, changing it to true\ndefault allow = false\nfoo := 1\nbar := 1\nallow = true {\n  foo == bar\n}\n\n# The string \"hello\" does not equal the string \"world\"\n# Since the document undefinedDocument was not previously defined, it remains undefined\nundefinedDocument { \"hello\" == \"world\" }\n\n###\n\n","completion":" Sounds good! I'll follow those guidelines. END"}
{"prompt":"\"\"name\" Subnets should not allow automatic public IP assignment \"description\" This rule checks whether VPC subnets are allowing automatic public IP assignment.\n \n VPC subnet is a part of the VPC having its own rules for traffic. Assigning the Public IP to the subnet automatically (on launch) can accidentally expose the instances within this subnet to the internet and should be edited to 'No' post creation of the subnet. \"exampleResourceJson\" ``` {\n  \"data\": {\n  \"graphSearch\": {\n  \"nodes\": [\n  {\n  \"entities\": [\n  {\n  \"id\": \"4ed8695a-ace3-53a2-a6a9-268d9aed4912\",\n  \"providerData\": {\n  \"AssignIpv6AddressOnCreation\": false,\n  \"AvailabilityZone\": \"us-east-1f\",\n  \"AvailabilityZoneId\": \"use1-az5\",\n  \"AvailableIpAddressCount\": 4091,\n  \"CidrBlock\": \"172.31.64.0\/20\",\n  \"CustomerOwnedIpv4Pool\": null,\n  \"DefaultForAz\": true,\n  \"EnableDns64\": false,\n  \"EnableLniAtDeviceIndex\": null,\n  \"Ipv6CidrBlockAssociationSet\": null,\n  \"Ipv6Native\": false,\n  \"MapCustomerOwnedIpOnLaunch\": false,\n  \"MapPublicIpOnLaunch\": true,\n  \"OutpostArn\": null,\n  \"OwnerId\": \"186300416549\",\n  \"PrivateDnsNameOptionsOnLaunch\": {\n  \"EnableResourceNameDnsAAAARecord\": false,\n  \"EnableResourceNameDnsARecord\": false,\n  \"HostnameType\": \"ip-name\"\n  },\n  \"State\": \"available\",\n  \"SubnetArn\": \"arn:aws:ec2:us-east-1:186300416549:subnet\/subnet-03bf56db874d820a9\",\n  \"SubnetId\": \"subnet-03bf56db874d820a9\",\n  \"Tags\": null,\n  \"VpcId\": \"vpc-03b62677b84ade81e\",\n  \"WizMetadata\": {\n  \"region\": \"us-east-1\"\n  }\n  }\n  }\n  ]\n  },\n  {\n  \"entities\": [\n  {\n  \"id\": \"e902e910-d028-546a-a562-3f24eac293a7\",\n  \"providerData\": {\n  \"AssignIpv6AddressOnCreation\": false,\n  \"AvailabilityZone\": \"eu-west-2b\",\n  \"AvailabilityZoneId\": \"euw2-az3\",\n  \"AvailableIpAddressCount\": 4091,\n  \"CidrBlock\": \"172.31.32.0\/20\",\n  \"CustomerOwnedIpv4Pool\": null,\n  \"DefaultForAz\": true,\n  \"EnableDns64\": false,\n  \"EnableLniAtDeviceIndex\": null,\n  \"Ipv6CidrBlockAssociationSet\": null,\n  \"Ipv6Native\": false,\n  \"MapCustomerOwnedIpOnLaunch\": false,\n  \"MapPublicIpOnLaunch\": true,\n  \"OutpostArn\": null,\n  \"OwnerId\": \"186300416549\",\n  \"PrivateDnsNameOptionsOnLaunch\": {\n  \"EnableResourceNameDnsAAAARecord\": false,\n  \"EnableResourceNameDnsARecord\": false,\n  \"HostnameType\": \"ip-name\"\n  },\n  \"State\": \"available\",\n  \"SubnetArn\": \"arn:aws:ec2:eu-west-2:186300416549:subnet\/subnet-058ef09bd0ee9395c\",\n  \"SubnetId\": \"subnet-058ef09bd0ee9395c\",\n  \"Tags\": null,\n  \"VpcId\": \"vpc-023df4f18c5bfab1d\",\n  \"WizMetadata\": {\n  \"region\": \"eu-west-2\"\n  }\n  }\n  }\n  ]\n  },\n  {\n  \"entities\": [\n  {\n  \"id\": \"40aa9693-e583-5410-82ab-4b45bbbe8f60\",\n  \"providerData\": {\n  \"AssignIpv6AddressOnCreation\": false,\n  \"AvailabilityZone\": \"ap-northeast-3b\",\n  \"AvailabilityZoneId\": \"apne3-az1\",\n  \"AvailableIpAddressCount\": 4091,\n  \"CidrBlock\": \"172.31.16.0\/20\",\n  \"CustomerOwnedIpv4Pool\": null,\n  \"DefaultForAz\": true,\n  \"EnableDns64\": false,\n  \"EnableLniAtDeviceIndex\": null,\n  \"Ipv6CidrBlockAssociationSet\": null,\n  \"Ipv6Native\": false,\n  \"MapCustomerOwnedIpOnLaunch\": null,\n  \"MapPublicIpOnLaunch\": true,\n  \"OutpostArn\": null,\n  \"OwnerId\": \"186300416549\",\n  \"PrivateDnsNameOptionsOnLaunch\": {\n  \"EnableResourceNameDnsAAAARecord\": false,\n  \"EnableResourceNameDnsARecord\": false,\n  \"HostnameType\": \"ip-name\"\n  },\n  \"State\": \"available\",\n  \"SubnetArn\": \"arn:aws:ec2:ap-northeast-3:186300416549:subnet\/subnet-02ba1f71f03ecf3b4\",\n  \"SubnetId\": \"subnet-02ba1f71f03ecf3b4\",\n  \"Tags\": null,\n  \"VpcId\": \"vpc-07ad5fe292396fccf\",\n  \"WizMetadata\": {\n  \"region\": \"ap-northeast-3\"\n  }\n  }\n  }\n  ]\n  },\n  {\n  \"entities\": [\n  {\n  \"id\": \"e400f6a9-44b4-522d-8c77-4c10679a0d65\",\n  \"providerData\": {\n  \"AssignIpv6AddressOnCreation\": false,\n  \"AvailabilityZone\": \"us-east-2b\",\n  \"AvailabilityZoneId\": \"use2-az2\",\n  \"AvailableIpAddressCount\": 4090,\n  \"CidrBlock\": \"172.31.16.0\/20\",\n  \"CustomerOwnedIpv4Pool\": null,\n  \"DefaultForAz\": true,\n  \"EnableDns64\": false,\n  \"EnableLniAtDeviceIndex\": null,\n  \"Ipv6CidrBlockAssociationSet\": null,\n  \"Ipv6Native\": false,\n  \"MapCustomerOwnedIpOnLaunch\": false,\n  \"MapPublicIpOnLaunch\": true,\n  \"OutpostArn\": null,\n  \"OwnerId\": \"186300416549\",\n  \"PrivateDnsNameOptionsOnLaunch\": {\n  \"EnableResourceNameDnsAAAARecord\": false,\n  \"EnableResourceNameDnsARecord\": false,\n  \"HostnameType\": \"ip-name\"\n  },\n  \"State\": \"available\",\n  \"SubnetArn\": \"arn:aws:ec2:us-east-2:186300416549:subnet\/subnet-f2c8ae88\",\n  \"SubnetId\": \"subnet-f2c8ae88\",\n  \"Tags\": null,\n  \"VpcId\": \"vpc-cad7d7a2\",\n  \"WizMetadata\": {\n  \"region\": \"us-east-2\"\n  }\n  }\n  }\n  ]\n  },\n  {\n  \"entities\": [\n  {\n  \"id\": \"d661ca5b-adbe-52a5-af68-22ca8bd43b70\",\n  \"providerData\": {\n  \"AssignIpv6AddressOnCreation\": false,\n  \"AvailabilityZone\": \"ca-central-1b\",\n  \"AvailabilityZoneId\": \"cac1-az2\",\n  \"AvailableIpAddressCount\": 4091,\n  \"CidrBlock\": \"172.31.0.0\/20\",\n  \"CustomerOwnedIpv4Pool\": null,\n  \"DefaultForAz\": true,\n  \"EnableDns64\": false,\n  \"EnableLniAtDeviceIndex\": null,\n  \"Ipv6CidrBlockAssociationSet\": null,\n  \"Ipv6Native\": false,\n  \"MapCustomerOwnedIpOnLaunch\": false,\n  \"MapPublicIpOnLaunch\": true,\n  \"OutpostArn\": null,\n  \"OwnerId\": \"186300416549\",\n  \"PrivateDnsNameOptionsOnLaunch\": {\n  \"EnableResourceNameDnsAAAARecord\": false,\n  \"EnableResourceNameDnsARecord\": false,\n  \"HostnameType\": \"ip-name\"\n  },\n  \"State\": \"available\",\n  \"SubnetArn\": \"arn:aws:ec2:ca-central-1:186300416549:subnet\/subnet-074d340db6d7df67b\",\n  \"SubnetId\": \"subnet-074d340db6d7df67b\",\n  \"Tags\": null,\n  \"VpcId\": \"vpc-09c7695f7ea919ad3\",\n  \"WizMetadata\": {\n  \"region\": \"ca-central-1\"\n  }\n  }\n  }\n  ]\n  }\n  ]\n  }\n  }\n }``` \"remediationInstructions\" Perform the following command in order to disable automatic public IP assignment via AWS CLI: \n ``` \n aws ec2 modify-subnet-attribute --subnet-id {{subnetID}} --no-map-public-ip-on-launch \n ``` ###\"\"\n\n###\n\n","completion":" \"package wiz\n\ndefault result = \"\"pass\"\"\n\nresult = \"\"fail\"\" { input.MapPublicIpOnLaunch == true } ###\" END"}
{"prompt":"\" \"name\" VPC subnet should have Private Google Access enabled \"description\" This rule checks whether the subnet has Private Google Access enabled, which allows access to Google APIs and services from an internal IP.  \nThis rule fails if it finds the field 'privateIpGoogleAccess = false'.\nWhen disabled, VM instances without an external IP can not reach Goggle APIs and services, and can only send traffic within the VPC network. Private Google Access should be enabled to allow access to Google APIs without exposing an external IP. \"exampleResourceJson\" ```  {\n  \"creationTimestamp\": \"2022-06-09T07:54:22.980-07:00\",\n  \"description\": \"\",\n  \"enableFlowLogs\": false,\n  \"externalIpv6Prefix\": \"\",\n  \"fingerprint\": \"83-ctFg6Ras=\",\n  \"gatewayAddress\": \"10.168.0.1\",\n  \"internalIpv6Prefix\": \"\",\n  \"ipCidrRange\": \"10.168.0.0\/20\",\n  \"ipv6AccessType\": \"\",\n  \"ipv6CidrRange\": \"\",\n  \"kind\": \"compute#subnetwork\",\n  \"name\": \"default\",\n  \"network\": \"https:\/\/www.googleapis.com\/compute\/v1\/projects\/eamon-wiz-test\/global\/networks\/default\",\n  \"privateIpGoogleAccess\": false,\n  \"privateIpv6GoogleAccess\": \"DISABLE_GOOGLE_ACCESS\",\n  \"purpose\": \"PRIVATE\",\n  \"region\": \"https:\/\/www.googleapis.com\/compute\/v1\/projects\/eamon-wiz-test\/regions\/us-west2\",\n  \"role\": \"\",\n  \"selfLink\": \"https:\/\/www.googleapis.com\/compute\/v1\/projects\/eamon-wiz-test\/regions\/us-west2\/subnetworks\/default\",\n  \"stackType\": \"IPV4_ONLY\",\n  \"state\": \"\",\n  \"WizMetadata\": {\n    \"region\": \"us-west2\"\n  }\n}```remediationInstructionsPerform the following command in order to enable Private Google Access via GCP CLI:  \n```  \ngcloud compute networks subnets update {{subnetName}} --region={{region}} --enable-private-ip-google-access  \n```###\"\"\n\n###\n\n","completion":" \"package wiz\n\ndefault result = \"pass\"\n\nresult = \"fail\" {\n\tinput.privateIpGoogleAccess == false\n    input.creationTimestamp\n}\n\ncurrentConfiguration := \"privateIpGoogleAccess is set to False\"\nexpectedConfiguration := \"privateIpGoogleAccess should be set to True\"###\" END"}
{"prompt":"\" \"name\" Network Watcher is enabled \"description\" This rule checks whether Azure Network Watcher is enabled.  \nThis rule fails if Network Watcher is enabled.\n>**Note**  \nThis rule is informational. It is used for the control `wc-id-1131`, and does not indicate a misconfiguration. \"exampleResourceJson\" ```  {\n  \"NetworkWatchers\": null,\n  \"displayName\": \"Norway East\",\n  \"id\": \"\/subscriptions\/4ed8b4e8-a487-47e8-bc4a-fed262716d39\/locations\/norwayeast\",\n  \"metadata\": {\n    \"geographyGroup\": \"Europe\",\n    \"latitude\": \"59.913868\",\n    \"longitude\": \"10.752245\",\n    \"pairedRegion\": [\n      {\n        \"id\": \"\/subscriptions\/4ed8b4e8-a487-47e8-bc4a-fed262716d39\/locations\/norwaywest\",\n        \"name\": \"norwaywest\"\n      }\n    ],\n    \"physicalLocation\": \"Norway\",\n    \"regionCategory\": \"Recommended\",\n    \"regionType\": \"Physical\"\n  },\n  \"name\": \"norwayeast\",\n  \"regionalDisplayName\": \"(Europe) Norway East\",\n  \"type\": \"Region\",\n  \"WizMetadata\": {\n    \"region\": null\n  }\n}```remediationInstructions###\"\"\n\n###\n\n","completion":" \"package wiz\n\ndefault result = \"pass\"\n\nresult = \"fail\" {\n\tcount(input.NetworkWatchers) > 0\n}\n\ncurrentConfiguration := \"This region has network watcher enabled\"\nexpectedConfiguration := \"\"\n###\" END"}
